#!/bin/env node

/**
 * Module dependencies.
 */

var app    = require('../app');
var debug  = require('debug')('world-view-app:server');
var http   = require('http');
var socket = require('socket.io');
var Kafka  = require('no-kafka');

var consumerDriver = new Kafka.SimpleConsumer({
	idleTimeout: 100
});

var consumerEvent = new Kafka.SimpleConsumer({
	idleTimeout: 100
});

var dataHandlerDriver = function (messageSet, topic, partition) {
    messageSet.forEach(function (m) {
	    try {
		var msgStr = m.message.value.toString('utf8');
		var msg    = JSON.parse(msgStr);

		if (msg.driverId % 100 == 0) {
		    io.emit('update', msg);
		}

	    } catch(err) {
		console.log(err);	
	    }
	});
};

var dataHandlerEvent = function (messageSet, topic, partition) {
    messageSet.forEach(function (m) {
	    try {
		var msgStr = m.message.value.toString('utf8');
		var msg    = JSON.parse(msgStr);

		if (msg.driverId % 100 == 0) {
		    io.emit('events', msgStr);
		}
	    } catch(err) {
		console.log(err);
	    }
	});
};

consumerDriver.init().then(function () {
	return consumerDriver.subscribe('driver-locations', [0, 1, 2, 3, 4], dataHandlerDriver); 
});

consumerEvent.init().then(function () {
	return consumerEvent.subscribe('events', [0, 1, 2, 3, 4], dataHandlerEvent);
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io     = socket(server);

io.on('connection', function(socket) {

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
